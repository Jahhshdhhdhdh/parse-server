"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.LiveQueryController = void 0;

var _ParseCloudCodePublisher = require("../LiveQuery/ParseCloudCodePublisher");

var _Options = require("../Options");

var _triggers = require("./../triggers");

class LiveQueryController {
  constructor(config) {
    // If config is empty, we just assume no classs needs to be registered as LiveQuery
    if (!config || !config.classNames) {
      this.classNames = new Set();
    } else if (config.classNames instanceof Array) {
      const classNames = config.classNames.map(name => {
        const _name = (0, _triggers.getClassName)(name);

        return new RegExp(`^${_name}$`);
      });
      this.classNames = new Set(classNames);
    } else {
      throw 'liveQuery.classes should be an array of string';
    }

    this.liveQueryPublisher = new _ParseCloudCodePublisher.ParseCloudCodePublisher(config);
  }

  onAfterSave(className, currentObject, originalObject, classLevelPermissions) {
    if (!this.hasLiveQuery(className)) {
      return;
    }

    const req = this._makePublisherRequest(currentObject, originalObject, classLevelPermissions);

    this.liveQueryPublisher.onCloudCodeAfterSave(req);
  }

  onAfterDelete(className, currentObject, originalObject, classLevelPermissions) {
    if (!this.hasLiveQuery(className)) {
      return;
    }

    const req = this._makePublisherRequest(currentObject, originalObject, classLevelPermissions);

    this.liveQueryPublisher.onCloudCodeAfterDelete(req);
  }

  hasLiveQuery(className) {
    for (const name of this.classNames) {
      if (name.test(className)) {
        return true;
      }
    }

    return false;
  }

  clearCachedRoles(user) {
    if (!user) {
      return;
    }

    return this.liveQueryPublisher.onClearCachedRoles(user);
  }

  _makePublisherRequest(currentObject, originalObject, classLevelPermissions) {
    const req = {
      object: currentObject
    };

    if (currentObject) {
      req.original = originalObject;
    }

    if (classLevelPermissions) {
      req.classLevelPermissions = classLevelPermissions;
    }

    return req;
  }

}

exports.LiveQueryController = LiveQueryController;
var _default = LiveQueryController;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMaXZlUXVlcnlDb250cm9sbGVyIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJjbGFzc05hbWVzIiwiU2V0IiwiQXJyYXkiLCJtYXAiLCJuYW1lIiwiX25hbWUiLCJnZXRDbGFzc05hbWUiLCJSZWdFeHAiLCJsaXZlUXVlcnlQdWJsaXNoZXIiLCJQYXJzZUNsb3VkQ29kZVB1Ymxpc2hlciIsIm9uQWZ0ZXJTYXZlIiwiY2xhc3NOYW1lIiwiY3VycmVudE9iamVjdCIsIm9yaWdpbmFsT2JqZWN0IiwiY2xhc3NMZXZlbFBlcm1pc3Npb25zIiwiaGFzTGl2ZVF1ZXJ5IiwicmVxIiwiX21ha2VQdWJsaXNoZXJSZXF1ZXN0Iiwib25DbG91ZENvZGVBZnRlclNhdmUiLCJvbkFmdGVyRGVsZXRlIiwib25DbG91ZENvZGVBZnRlckRlbGV0ZSIsInRlc3QiLCJjbGVhckNhY2hlZFJvbGVzIiwidXNlciIsIm9uQ2xlYXJDYWNoZWRSb2xlcyIsIm9iamVjdCIsIm9yaWdpbmFsIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL0NvbnRyb2xsZXJzL0xpdmVRdWVyeUNvbnRyb2xsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFyc2VDbG91ZENvZGVQdWJsaXNoZXIgfSBmcm9tICcuLi9MaXZlUXVlcnkvUGFyc2VDbG91ZENvZGVQdWJsaXNoZXInO1xuaW1wb3J0IHsgTGl2ZVF1ZXJ5T3B0aW9ucyB9IGZyb20gJy4uL09wdGlvbnMnO1xuaW1wb3J0IHsgZ2V0Q2xhc3NOYW1lIH0gZnJvbSAnLi8uLi90cmlnZ2Vycyc7XG5leHBvcnQgY2xhc3MgTGl2ZVF1ZXJ5Q29udHJvbGxlciB7XG4gIGNsYXNzTmFtZXM6IGFueTtcbiAgbGl2ZVF1ZXJ5UHVibGlzaGVyOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiA/TGl2ZVF1ZXJ5T3B0aW9ucykge1xuICAgIC8vIElmIGNvbmZpZyBpcyBlbXB0eSwgd2UganVzdCBhc3N1bWUgbm8gY2xhc3NzIG5lZWRzIHRvIGJlIHJlZ2lzdGVyZWQgYXMgTGl2ZVF1ZXJ5XG4gICAgaWYgKCFjb25maWcgfHwgIWNvbmZpZy5jbGFzc05hbWVzKSB7XG4gICAgICB0aGlzLmNsYXNzTmFtZXMgPSBuZXcgU2V0KCk7XG4gICAgfSBlbHNlIGlmIChjb25maWcuY2xhc3NOYW1lcyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICBjb25zdCBjbGFzc05hbWVzID0gY29uZmlnLmNsYXNzTmFtZXMubWFwKG5hbWUgPT4ge1xuICAgICAgICBjb25zdCBfbmFtZSA9IGdldENsYXNzTmFtZShuYW1lKTtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoYF4ke19uYW1lfSRgKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5jbGFzc05hbWVzID0gbmV3IFNldChjbGFzc05hbWVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgJ2xpdmVRdWVyeS5jbGFzc2VzIHNob3VsZCBiZSBhbiBhcnJheSBvZiBzdHJpbmcnO1xuICAgIH1cbiAgICB0aGlzLmxpdmVRdWVyeVB1Ymxpc2hlciA9IG5ldyBQYXJzZUNsb3VkQ29kZVB1Ymxpc2hlcihjb25maWcpO1xuICB9XG5cbiAgb25BZnRlclNhdmUoXG4gICAgY2xhc3NOYW1lOiBzdHJpbmcsXG4gICAgY3VycmVudE9iamVjdDogYW55LFxuICAgIG9yaWdpbmFsT2JqZWN0OiBhbnksXG4gICAgY2xhc3NMZXZlbFBlcm1pc3Npb25zOiA/YW55XG4gICkge1xuICAgIGlmICghdGhpcy5oYXNMaXZlUXVlcnkoY2xhc3NOYW1lKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCByZXEgPSB0aGlzLl9tYWtlUHVibGlzaGVyUmVxdWVzdChjdXJyZW50T2JqZWN0LCBvcmlnaW5hbE9iamVjdCwgY2xhc3NMZXZlbFBlcm1pc3Npb25zKTtcbiAgICB0aGlzLmxpdmVRdWVyeVB1Ymxpc2hlci5vbkNsb3VkQ29kZUFmdGVyU2F2ZShyZXEpO1xuICB9XG5cbiAgb25BZnRlckRlbGV0ZShcbiAgICBjbGFzc05hbWU6IHN0cmluZyxcbiAgICBjdXJyZW50T2JqZWN0OiBhbnksXG4gICAgb3JpZ2luYWxPYmplY3Q6IGFueSxcbiAgICBjbGFzc0xldmVsUGVybWlzc2lvbnM6IGFueVxuICApIHtcbiAgICBpZiAoIXRoaXMuaGFzTGl2ZVF1ZXJ5KGNsYXNzTmFtZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcmVxID0gdGhpcy5fbWFrZVB1Ymxpc2hlclJlcXVlc3QoY3VycmVudE9iamVjdCwgb3JpZ2luYWxPYmplY3QsIGNsYXNzTGV2ZWxQZXJtaXNzaW9ucyk7XG4gICAgdGhpcy5saXZlUXVlcnlQdWJsaXNoZXIub25DbG91ZENvZGVBZnRlckRlbGV0ZShyZXEpO1xuICB9XG5cbiAgaGFzTGl2ZVF1ZXJ5KGNsYXNzTmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgZm9yIChjb25zdCBuYW1lIG9mIHRoaXMuY2xhc3NOYW1lcykge1xuICAgICAgaWYgKG5hbWUudGVzdChjbGFzc05hbWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjbGVhckNhY2hlZFJvbGVzKHVzZXI6IGFueSkge1xuICAgIGlmICghdXNlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5saXZlUXVlcnlQdWJsaXNoZXIub25DbGVhckNhY2hlZFJvbGVzKHVzZXIpO1xuICB9XG5cbiAgX21ha2VQdWJsaXNoZXJSZXF1ZXN0KGN1cnJlbnRPYmplY3Q6IGFueSwgb3JpZ2luYWxPYmplY3Q6IGFueSwgY2xhc3NMZXZlbFBlcm1pc3Npb25zOiA/YW55KTogYW55IHtcbiAgICBjb25zdCByZXEgPSB7XG4gICAgICBvYmplY3Q6IGN1cnJlbnRPYmplY3QsXG4gICAgfTtcbiAgICBpZiAoY3VycmVudE9iamVjdCkge1xuICAgICAgcmVxLm9yaWdpbmFsID0gb3JpZ2luYWxPYmplY3Q7XG4gICAgfVxuICAgIGlmIChjbGFzc0xldmVsUGVybWlzc2lvbnMpIHtcbiAgICAgIHJlcS5jbGFzc0xldmVsUGVybWlzc2lvbnMgPSBjbGFzc0xldmVsUGVybWlzc2lvbnM7XG4gICAgfVxuICAgIHJldHVybiByZXE7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTGl2ZVF1ZXJ5Q29udHJvbGxlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNPLE1BQU1BLG1CQUFOLENBQTBCO0VBSS9CQyxXQUFXLENBQUNDLE1BQUQsRUFBNEI7SUFDckM7SUFDQSxJQUFJLENBQUNBLE1BQUQsSUFBVyxDQUFDQSxNQUFNLENBQUNDLFVBQXZCLEVBQW1DO01BQ2pDLEtBQUtBLFVBQUwsR0FBa0IsSUFBSUMsR0FBSixFQUFsQjtJQUNELENBRkQsTUFFTyxJQUFJRixNQUFNLENBQUNDLFVBQVAsWUFBNkJFLEtBQWpDLEVBQXdDO01BQzdDLE1BQU1GLFVBQVUsR0FBR0QsTUFBTSxDQUFDQyxVQUFQLENBQWtCRyxHQUFsQixDQUFzQkMsSUFBSSxJQUFJO1FBQy9DLE1BQU1DLEtBQUssR0FBRyxJQUFBQyxzQkFBQSxFQUFhRixJQUFiLENBQWQ7O1FBQ0EsT0FBTyxJQUFJRyxNQUFKLENBQVksSUFBR0YsS0FBTSxHQUFyQixDQUFQO01BQ0QsQ0FIa0IsQ0FBbkI7TUFJQSxLQUFLTCxVQUFMLEdBQWtCLElBQUlDLEdBQUosQ0FBUUQsVUFBUixDQUFsQjtJQUNELENBTk0sTUFNQTtNQUNMLE1BQU0sZ0RBQU47SUFDRDs7SUFDRCxLQUFLUSxrQkFBTCxHQUEwQixJQUFJQyxnREFBSixDQUE0QlYsTUFBNUIsQ0FBMUI7RUFDRDs7RUFFRFcsV0FBVyxDQUNUQyxTQURTLEVBRVRDLGFBRlMsRUFHVEMsY0FIUyxFQUlUQyxxQkFKUyxFQUtUO0lBQ0EsSUFBSSxDQUFDLEtBQUtDLFlBQUwsQ0FBa0JKLFNBQWxCLENBQUwsRUFBbUM7TUFDakM7SUFDRDs7SUFDRCxNQUFNSyxHQUFHLEdBQUcsS0FBS0MscUJBQUwsQ0FBMkJMLGFBQTNCLEVBQTBDQyxjQUExQyxFQUEwREMscUJBQTFELENBQVo7O0lBQ0EsS0FBS04sa0JBQUwsQ0FBd0JVLG9CQUF4QixDQUE2Q0YsR0FBN0M7RUFDRDs7RUFFREcsYUFBYSxDQUNYUixTQURXLEVBRVhDLGFBRlcsRUFHWEMsY0FIVyxFQUlYQyxxQkFKVyxFQUtYO0lBQ0EsSUFBSSxDQUFDLEtBQUtDLFlBQUwsQ0FBa0JKLFNBQWxCLENBQUwsRUFBbUM7TUFDakM7SUFDRDs7SUFDRCxNQUFNSyxHQUFHLEdBQUcsS0FBS0MscUJBQUwsQ0FBMkJMLGFBQTNCLEVBQTBDQyxjQUExQyxFQUEwREMscUJBQTFELENBQVo7O0lBQ0EsS0FBS04sa0JBQUwsQ0FBd0JZLHNCQUF4QixDQUErQ0osR0FBL0M7RUFDRDs7RUFFREQsWUFBWSxDQUFDSixTQUFELEVBQTZCO0lBQ3ZDLEtBQUssTUFBTVAsSUFBWCxJQUFtQixLQUFLSixVQUF4QixFQUFvQztNQUNsQyxJQUFJSSxJQUFJLENBQUNpQixJQUFMLENBQVVWLFNBQVYsQ0FBSixFQUEwQjtRQUN4QixPQUFPLElBQVA7TUFDRDtJQUNGOztJQUNELE9BQU8sS0FBUDtFQUNEOztFQUVEVyxnQkFBZ0IsQ0FBQ0MsSUFBRCxFQUFZO0lBQzFCLElBQUksQ0FBQ0EsSUFBTCxFQUFXO01BQ1Q7SUFDRDs7SUFDRCxPQUFPLEtBQUtmLGtCQUFMLENBQXdCZ0Isa0JBQXhCLENBQTJDRCxJQUEzQyxDQUFQO0VBQ0Q7O0VBRUROLHFCQUFxQixDQUFDTCxhQUFELEVBQXFCQyxjQUFyQixFQUEwQ0MscUJBQTFDLEVBQTRFO0lBQy9GLE1BQU1FLEdBQUcsR0FBRztNQUNWUyxNQUFNLEVBQUViO0lBREUsQ0FBWjs7SUFHQSxJQUFJQSxhQUFKLEVBQW1CO01BQ2pCSSxHQUFHLENBQUNVLFFBQUosR0FBZWIsY0FBZjtJQUNEOztJQUNELElBQUlDLHFCQUFKLEVBQTJCO01BQ3pCRSxHQUFHLENBQUNGLHFCQUFKLEdBQTRCQSxxQkFBNUI7SUFDRDs7SUFDRCxPQUFPRSxHQUFQO0VBQ0Q7O0FBekU4Qjs7O2VBNEVsQm5CLG1CIn0=