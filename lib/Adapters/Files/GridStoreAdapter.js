"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.GridStoreAdapter = void 0;
var _mongodb = require("mongodb");
var _FilesAdapter = require("./FilesAdapter");
var _defaults = _interopRequireDefault(require("../../defaults"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 GridStoreAdapter
 Stores files in Mongo using GridStore
 Requires the database adapter to be based on mongoclient
 (GridStore is deprecated, Please use GridFSBucket instead)

 
 */

// -disable-next

class GridStoreAdapter extends _FilesAdapter.FilesAdapter {
  constructor(mongoDatabaseURI = _defaults.default.DefaultMongoURI, mongoOptions = {}) {
    super();
    this._databaseURI = mongoDatabaseURI;
    const defaultMongoOptions = {
      useNewUrlParser: true,
      useUnifiedTopology: true
    };
    this._mongoOptions = Object.assign(defaultMongoOptions, mongoOptions);
  }
  _connect() {
    if (!this._connectionPromise) {
      this._connectionPromise = _mongodb.MongoClient.connect(this._databaseURI, this._mongoOptions).then(client => {
        this._client = client;
        return client.db(client.s.options.dbName);
      });
    }
    return this._connectionPromise;
  }

  // For a given config object, filename, and data, store a file
  // Returns a promise
  createFile(filename, data) {
    return this._connect().then(database => {
      const gridStore = new _mongodb.GridStore(database, filename, 'w');
      return gridStore.open();
    }).then(gridStore => {
      return gridStore.write(data);
    }).then(gridStore => {
      return gridStore.close();
    });
  }
  deleteFile(filename) {
    return this._connect().then(database => {
      const gridStore = new _mongodb.GridStore(database, filename, 'r');
      return gridStore.open();
    }).then(gridStore => {
      return gridStore.unlink();
    }).then(gridStore => {
      return gridStore.close();
    });
  }
  getFileData(filename) {
    return this._connect().then(database => {
      return _mongodb.GridStore.exist(database, filename).then(() => {
        const gridStore = new _mongodb.GridStore(database, filename, 'r');
        return gridStore.open();
      });
    }).then(gridStore => {
      return gridStore.read();
    });
  }
  getFileLocation(config, filename) {
    return config.mount + '/files/' + config.applicationId + '/' + encodeURIComponent(filename);
  }
  async handleFileStream(filename, req, res, contentType) {
    const stream = await this._connect().then(database => {
      return _mongodb.GridStore.exist(database, filename).then(() => {
        const gridStore = new _mongodb.GridStore(database, filename, 'r');
        return gridStore.open();
      });
    });
    handleRangeRequest(stream, req, res, contentType);
  }
  handleShutdown() {
    if (!this._client) {
      return Promise.resolve();
    }
    return this._client.close(false);
  }
  validateFilename(filename) {
    return (0, _FilesAdapter.validateFilename)(filename);
  }
}

// handleRangeRequest is licensed under Creative Commons Attribution 4.0 International License (https://creativecommons.org/licenses/by/4.0/).
// Author: LEROIB at weightingformypizza (https://weightingformypizza.wordpress.com/2015/06/24/stream-html5-media-content-like-video-audio-from-mongodb-using-express-and-gridstore/).
exports.GridStoreAdapter = GridStoreAdapter;
function handleRangeRequest(stream, req, res, contentType) {
  const buffer_size = 1024 * 1024; //1024Kb
  // Range request, partial stream the file
  const parts = req.get('Range').replace(/bytes=/, '').split('-');
  let [start, end] = parts;
  const notEnded = !end && end !== 0;
  const notStarted = !start && start !== 0;
  // No end provided, we want all bytes
  if (notEnded) {
    end = stream.length - 1;
  }
  // No start provided, we're reading backwards
  if (notStarted) {
    start = stream.length - end;
    end = start + end - 1;
  }

  // Data exceeds the buffer_size, cap
  if (end - start >= buffer_size) {
    end = start + buffer_size - 1;
  }
  const contentLength = end - start + 1;
  res.writeHead(206, {
    'Content-Range': 'bytes ' + start + '-' + end + '/' + stream.length,
    'Accept-Ranges': 'bytes',
    'Content-Length': contentLength,
    'Content-Type': contentType
  });
  stream.seek(start, function () {
    // Get gridFile stream
    const gridFileStream = stream.stream(true);
    let bufferAvail = 0;
    let remainingBytesToWrite = contentLength;
    let totalBytesWritten = 0;
    // Write to response
    gridFileStream.on('data', function (data) {
      bufferAvail += data.length;
      if (bufferAvail > 0) {
        // slice returns the same buffer if overflowing
        // safe to call in any case
        const buffer = data.slice(0, remainingBytesToWrite);
        // Write the buffer
        res.write(buffer);
        // Increment total
        totalBytesWritten += buffer.length;
        // Decrement remaining
        remainingBytesToWrite -= data.length;
        // Decrement the available buffer
        bufferAvail -= buffer.length;
      }
      // In case of small slices, all values will be good at that point
      // we've written enough, end...
      if (totalBytesWritten >= contentLength) {
        stream.close();
        res.end();
        this.destroy();
      }
    });
  });
}
var _default = GridStoreAdapter;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbW9uZ29kYiIsInJlcXVpcmUiLCJfRmlsZXNBZGFwdGVyIiwiX2RlZmF1bHRzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiR3JpZFN0b3JlQWRhcHRlciIsIkZpbGVzQWRhcHRlciIsImNvbnN0cnVjdG9yIiwibW9uZ29EYXRhYmFzZVVSSSIsImRlZmF1bHRzIiwiRGVmYXVsdE1vbmdvVVJJIiwibW9uZ29PcHRpb25zIiwiX2RhdGFiYXNlVVJJIiwiZGVmYXVsdE1vbmdvT3B0aW9ucyIsInVzZU5ld1VybFBhcnNlciIsInVzZVVuaWZpZWRUb3BvbG9neSIsIl9tb25nb09wdGlvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJfY29ubmVjdCIsIl9jb25uZWN0aW9uUHJvbWlzZSIsIk1vbmdvQ2xpZW50IiwiY29ubmVjdCIsInRoZW4iLCJjbGllbnQiLCJfY2xpZW50IiwiZGIiLCJzIiwib3B0aW9ucyIsImRiTmFtZSIsImNyZWF0ZUZpbGUiLCJmaWxlbmFtZSIsImRhdGEiLCJkYXRhYmFzZSIsImdyaWRTdG9yZSIsIkdyaWRTdG9yZSIsIm9wZW4iLCJ3cml0ZSIsImNsb3NlIiwiZGVsZXRlRmlsZSIsInVubGluayIsImdldEZpbGVEYXRhIiwiZXhpc3QiLCJyZWFkIiwiZ2V0RmlsZUxvY2F0aW9uIiwiY29uZmlnIiwibW91bnQiLCJhcHBsaWNhdGlvbklkIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiaGFuZGxlRmlsZVN0cmVhbSIsInJlcSIsInJlcyIsImNvbnRlbnRUeXBlIiwic3RyZWFtIiwiaGFuZGxlUmFuZ2VSZXF1ZXN0IiwiaGFuZGxlU2h1dGRvd24iLCJQcm9taXNlIiwicmVzb2x2ZSIsInZhbGlkYXRlRmlsZW5hbWUiLCJleHBvcnRzIiwiYnVmZmVyX3NpemUiLCJwYXJ0cyIsImdldCIsInJlcGxhY2UiLCJzcGxpdCIsInN0YXJ0IiwiZW5kIiwibm90RW5kZWQiLCJub3RTdGFydGVkIiwibGVuZ3RoIiwiY29udGVudExlbmd0aCIsIndyaXRlSGVhZCIsInNlZWsiLCJncmlkRmlsZVN0cmVhbSIsImJ1ZmZlckF2YWlsIiwicmVtYWluaW5nQnl0ZXNUb1dyaXRlIiwidG90YWxCeXRlc1dyaXR0ZW4iLCJvbiIsImJ1ZmZlciIsInNsaWNlIiwiZGVzdHJveSIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL0FkYXB0ZXJzL0ZpbGVzL0dyaWRTdG9yZUFkYXB0ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gR3JpZFN0b3JlQWRhcHRlclxuIFN0b3JlcyBmaWxlcyBpbiBNb25nbyB1c2luZyBHcmlkU3RvcmVcbiBSZXF1aXJlcyB0aGUgZGF0YWJhc2UgYWRhcHRlciB0byBiZSBiYXNlZCBvbiBtb25nb2NsaWVudFxuIChHcmlkU3RvcmUgaXMgZGVwcmVjYXRlZCwgUGxlYXNlIHVzZSBHcmlkRlNCdWNrZXQgaW5zdGVhZClcblxuIEBmbG93IHdlYWtcbiAqL1xuXG4vLyBAZmxvdy1kaXNhYmxlLW5leHRcbmltcG9ydCB7IE1vbmdvQ2xpZW50LCBHcmlkU3RvcmUsIERiIH0gZnJvbSAnbW9uZ29kYic7XG5pbXBvcnQgeyBGaWxlc0FkYXB0ZXIsIHZhbGlkYXRlRmlsZW5hbWUgfSBmcm9tICcuL0ZpbGVzQWRhcHRlcic7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi4vLi4vZGVmYXVsdHMnO1xuXG5leHBvcnQgY2xhc3MgR3JpZFN0b3JlQWRhcHRlciBleHRlbmRzIEZpbGVzQWRhcHRlciB7XG4gIF9kYXRhYmFzZVVSSTogc3RyaW5nO1xuICBfY29ubmVjdGlvblByb21pc2U6IFByb21pc2U8RGI+O1xuICBfbW9uZ29PcHRpb25zOiBPYmplY3Q7XG5cbiAgY29uc3RydWN0b3IobW9uZ29EYXRhYmFzZVVSSSA9IGRlZmF1bHRzLkRlZmF1bHRNb25nb1VSSSwgbW9uZ29PcHRpb25zID0ge30pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2RhdGFiYXNlVVJJID0gbW9uZ29EYXRhYmFzZVVSSTtcblxuICAgIGNvbnN0IGRlZmF1bHRNb25nb09wdGlvbnMgPSB7XG4gICAgICB1c2VOZXdVcmxQYXJzZXI6IHRydWUsXG4gICAgICB1c2VVbmlmaWVkVG9wb2xvZ3k6IHRydWUsXG4gICAgfTtcbiAgICB0aGlzLl9tb25nb09wdGlvbnMgPSBPYmplY3QuYXNzaWduKGRlZmF1bHRNb25nb09wdGlvbnMsIG1vbmdvT3B0aW9ucyk7XG4gIH1cblxuICBfY29ubmVjdCgpIHtcbiAgICBpZiAoIXRoaXMuX2Nvbm5lY3Rpb25Qcm9taXNlKSB7XG4gICAgICB0aGlzLl9jb25uZWN0aW9uUHJvbWlzZSA9IE1vbmdvQ2xpZW50LmNvbm5lY3QodGhpcy5fZGF0YWJhc2VVUkksIHRoaXMuX21vbmdvT3B0aW9ucykudGhlbihcbiAgICAgICAgY2xpZW50ID0+IHtcbiAgICAgICAgICB0aGlzLl9jbGllbnQgPSBjbGllbnQ7XG4gICAgICAgICAgcmV0dXJuIGNsaWVudC5kYihjbGllbnQucy5vcHRpb25zLmRiTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jb25uZWN0aW9uUHJvbWlzZTtcbiAgfVxuXG4gIC8vIEZvciBhIGdpdmVuIGNvbmZpZyBvYmplY3QsIGZpbGVuYW1lLCBhbmQgZGF0YSwgc3RvcmUgYSBmaWxlXG4gIC8vIFJldHVybnMgYSBwcm9taXNlXG4gIGNyZWF0ZUZpbGUoZmlsZW5hbWU6IHN0cmluZywgZGF0YSkge1xuICAgIHJldHVybiB0aGlzLl9jb25uZWN0KClcbiAgICAgIC50aGVuKGRhdGFiYXNlID0+IHtcbiAgICAgICAgY29uc3QgZ3JpZFN0b3JlID0gbmV3IEdyaWRTdG9yZShkYXRhYmFzZSwgZmlsZW5hbWUsICd3Jyk7XG4gICAgICAgIHJldHVybiBncmlkU3RvcmUub3BlbigpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKGdyaWRTdG9yZSA9PiB7XG4gICAgICAgIHJldHVybiBncmlkU3RvcmUud3JpdGUoZGF0YSk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oZ3JpZFN0b3JlID0+IHtcbiAgICAgICAgcmV0dXJuIGdyaWRTdG9yZS5jbG9zZSgpO1xuICAgICAgfSk7XG4gIH1cblxuICBkZWxldGVGaWxlKGZpbGVuYW1lOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5fY29ubmVjdCgpXG4gICAgICAudGhlbihkYXRhYmFzZSA9PiB7XG4gICAgICAgIGNvbnN0IGdyaWRTdG9yZSA9IG5ldyBHcmlkU3RvcmUoZGF0YWJhc2UsIGZpbGVuYW1lLCAncicpO1xuICAgICAgICByZXR1cm4gZ3JpZFN0b3JlLm9wZW4oKTtcbiAgICAgIH0pXG4gICAgICAudGhlbihncmlkU3RvcmUgPT4ge1xuICAgICAgICByZXR1cm4gZ3JpZFN0b3JlLnVubGluaygpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKGdyaWRTdG9yZSA9PiB7XG4gICAgICAgIHJldHVybiBncmlkU3RvcmUuY2xvc2UoKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgZ2V0RmlsZURhdGEoZmlsZW5hbWU6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLl9jb25uZWN0KClcbiAgICAgIC50aGVuKGRhdGFiYXNlID0+IHtcbiAgICAgICAgcmV0dXJuIEdyaWRTdG9yZS5leGlzdChkYXRhYmFzZSwgZmlsZW5hbWUpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGdyaWRTdG9yZSA9IG5ldyBHcmlkU3RvcmUoZGF0YWJhc2UsIGZpbGVuYW1lLCAncicpO1xuICAgICAgICAgIHJldHVybiBncmlkU3RvcmUub3BlbigpO1xuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAudGhlbihncmlkU3RvcmUgPT4ge1xuICAgICAgICByZXR1cm4gZ3JpZFN0b3JlLnJlYWQoKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgZ2V0RmlsZUxvY2F0aW9uKGNvbmZpZywgZmlsZW5hbWUpIHtcbiAgICByZXR1cm4gY29uZmlnLm1vdW50ICsgJy9maWxlcy8nICsgY29uZmlnLmFwcGxpY2F0aW9uSWQgKyAnLycgKyBlbmNvZGVVUklDb21wb25lbnQoZmlsZW5hbWUpO1xuICB9XG5cbiAgYXN5bmMgaGFuZGxlRmlsZVN0cmVhbShmaWxlbmFtZTogc3RyaW5nLCByZXEsIHJlcywgY29udGVudFR5cGUpIHtcbiAgICBjb25zdCBzdHJlYW0gPSBhd2FpdCB0aGlzLl9jb25uZWN0KCkudGhlbihkYXRhYmFzZSA9PiB7XG4gICAgICByZXR1cm4gR3JpZFN0b3JlLmV4aXN0KGRhdGFiYXNlLCBmaWxlbmFtZSkudGhlbigoKSA9PiB7XG4gICAgICAgIGNvbnN0IGdyaWRTdG9yZSA9IG5ldyBHcmlkU3RvcmUoZGF0YWJhc2UsIGZpbGVuYW1lLCAncicpO1xuICAgICAgICByZXR1cm4gZ3JpZFN0b3JlLm9wZW4oKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGhhbmRsZVJhbmdlUmVxdWVzdChzdHJlYW0sIHJlcSwgcmVzLCBjb250ZW50VHlwZSk7XG4gIH1cblxuICBoYW5kbGVTaHV0ZG93bigpIHtcbiAgICBpZiAoIXRoaXMuX2NsaWVudCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LmNsb3NlKGZhbHNlKTtcbiAgfVxuXG4gIHZhbGlkYXRlRmlsZW5hbWUoZmlsZW5hbWUpIHtcbiAgICByZXR1cm4gdmFsaWRhdGVGaWxlbmFtZShmaWxlbmFtZSk7XG4gIH1cbn1cblxuLy8gaGFuZGxlUmFuZ2VSZXF1ZXN0IGlzIGxpY2Vuc2VkIHVuZGVyIENyZWF0aXZlIENvbW1vbnMgQXR0cmlidXRpb24gNC4wIEludGVybmF0aW9uYWwgTGljZW5zZSAoaHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LzQuMC8pLlxuLy8gQXV0aG9yOiBMRVJPSUIgYXQgd2VpZ2h0aW5nZm9ybXlwaXp6YSAoaHR0cHM6Ly93ZWlnaHRpbmdmb3JteXBpenphLndvcmRwcmVzcy5jb20vMjAxNS8wNi8yNC9zdHJlYW0taHRtbDUtbWVkaWEtY29udGVudC1saWtlLXZpZGVvLWF1ZGlvLWZyb20tbW9uZ29kYi11c2luZy1leHByZXNzLWFuZC1ncmlkc3RvcmUvKS5cbmZ1bmN0aW9uIGhhbmRsZVJhbmdlUmVxdWVzdChzdHJlYW0sIHJlcSwgcmVzLCBjb250ZW50VHlwZSkge1xuICBjb25zdCBidWZmZXJfc2l6ZSA9IDEwMjQgKiAxMDI0OyAvLzEwMjRLYlxuICAvLyBSYW5nZSByZXF1ZXN0LCBwYXJ0aWFsIHN0cmVhbSB0aGUgZmlsZVxuICBjb25zdCBwYXJ0cyA9IHJlcVxuICAgIC5nZXQoJ1JhbmdlJylcbiAgICAucmVwbGFjZSgvYnl0ZXM9LywgJycpXG4gICAgLnNwbGl0KCctJyk7XG4gIGxldCBbc3RhcnQsIGVuZF0gPSBwYXJ0cztcbiAgY29uc3Qgbm90RW5kZWQgPSAhZW5kICYmIGVuZCAhPT0gMDtcbiAgY29uc3Qgbm90U3RhcnRlZCA9ICFzdGFydCAmJiBzdGFydCAhPT0gMDtcbiAgLy8gTm8gZW5kIHByb3ZpZGVkLCB3ZSB3YW50IGFsbCBieXRlc1xuICBpZiAobm90RW5kZWQpIHtcbiAgICBlbmQgPSBzdHJlYW0ubGVuZ3RoIC0gMTtcbiAgfVxuICAvLyBObyBzdGFydCBwcm92aWRlZCwgd2UncmUgcmVhZGluZyBiYWNrd2FyZHNcbiAgaWYgKG5vdFN0YXJ0ZWQpIHtcbiAgICBzdGFydCA9IHN0cmVhbS5sZW5ndGggLSBlbmQ7XG4gICAgZW5kID0gc3RhcnQgKyBlbmQgLSAxO1xuICB9XG5cbiAgLy8gRGF0YSBleGNlZWRzIHRoZSBidWZmZXJfc2l6ZSwgY2FwXG4gIGlmIChlbmQgLSBzdGFydCA+PSBidWZmZXJfc2l6ZSkge1xuICAgIGVuZCA9IHN0YXJ0ICsgYnVmZmVyX3NpemUgLSAxO1xuICB9XG5cbiAgY29uc3QgY29udGVudExlbmd0aCA9IGVuZCAtIHN0YXJ0ICsgMTtcblxuICByZXMud3JpdGVIZWFkKDIwNiwge1xuICAgICdDb250ZW50LVJhbmdlJzogJ2J5dGVzICcgKyBzdGFydCArICctJyArIGVuZCArICcvJyArIHN0cmVhbS5sZW5ndGgsXG4gICAgJ0FjY2VwdC1SYW5nZXMnOiAnYnl0ZXMnLFxuICAgICdDb250ZW50LUxlbmd0aCc6IGNvbnRlbnRMZW5ndGgsXG4gICAgJ0NvbnRlbnQtVHlwZSc6IGNvbnRlbnRUeXBlLFxuICB9KTtcblxuICBzdHJlYW0uc2VlayhzdGFydCwgZnVuY3Rpb24gKCkge1xuICAgIC8vIEdldCBncmlkRmlsZSBzdHJlYW1cbiAgICBjb25zdCBncmlkRmlsZVN0cmVhbSA9IHN0cmVhbS5zdHJlYW0odHJ1ZSk7XG4gICAgbGV0IGJ1ZmZlckF2YWlsID0gMDtcbiAgICBsZXQgcmVtYWluaW5nQnl0ZXNUb1dyaXRlID0gY29udGVudExlbmd0aDtcbiAgICBsZXQgdG90YWxCeXRlc1dyaXR0ZW4gPSAwO1xuICAgIC8vIFdyaXRlIHRvIHJlc3BvbnNlXG4gICAgZ3JpZEZpbGVTdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgYnVmZmVyQXZhaWwgKz0gZGF0YS5sZW5ndGg7XG4gICAgICBpZiAoYnVmZmVyQXZhaWwgPiAwKSB7XG4gICAgICAgIC8vIHNsaWNlIHJldHVybnMgdGhlIHNhbWUgYnVmZmVyIGlmIG92ZXJmbG93aW5nXG4gICAgICAgIC8vIHNhZmUgdG8gY2FsbCBpbiBhbnkgY2FzZVxuICAgICAgICBjb25zdCBidWZmZXIgPSBkYXRhLnNsaWNlKDAsIHJlbWFpbmluZ0J5dGVzVG9Xcml0ZSk7XG4gICAgICAgIC8vIFdyaXRlIHRoZSBidWZmZXJcbiAgICAgICAgcmVzLndyaXRlKGJ1ZmZlcik7XG4gICAgICAgIC8vIEluY3JlbWVudCB0b3RhbFxuICAgICAgICB0b3RhbEJ5dGVzV3JpdHRlbiArPSBidWZmZXIubGVuZ3RoO1xuICAgICAgICAvLyBEZWNyZW1lbnQgcmVtYWluaW5nXG4gICAgICAgIHJlbWFpbmluZ0J5dGVzVG9Xcml0ZSAtPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgLy8gRGVjcmVtZW50IHRoZSBhdmFpbGFibGUgYnVmZmVyXG4gICAgICAgIGJ1ZmZlckF2YWlsIC09IGJ1ZmZlci5sZW5ndGg7XG4gICAgICB9XG4gICAgICAvLyBJbiBjYXNlIG9mIHNtYWxsIHNsaWNlcywgYWxsIHZhbHVlcyB3aWxsIGJlIGdvb2QgYXQgdGhhdCBwb2ludFxuICAgICAgLy8gd2UndmUgd3JpdHRlbiBlbm91Z2gsIGVuZC4uLlxuICAgICAgaWYgKHRvdGFsQnl0ZXNXcml0dGVuID49IGNvbnRlbnRMZW5ndGgpIHtcbiAgICAgICAgc3RyZWFtLmNsb3NlKCk7XG4gICAgICAgIHJlcy5lbmQoKTtcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBHcmlkU3RvcmVBZGFwdGVyO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFVQSxJQUFBQSxRQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxhQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxTQUFBLEdBQUFDLHNCQUFBLENBQUFILE9BQUE7QUFBc0MsU0FBQUcsdUJBQUFDLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFadEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFLTyxNQUFNRyxnQkFBZ0IsU0FBU0MsMEJBQVksQ0FBQztFQUtqREMsV0FBV0EsQ0FBQ0MsZ0JBQWdCLEdBQUdDLGlCQUFRLENBQUNDLGVBQWUsRUFBRUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxFQUFFO0lBQzFFLEtBQUssRUFBRTtJQUNQLElBQUksQ0FBQ0MsWUFBWSxHQUFHSixnQkFBZ0I7SUFFcEMsTUFBTUssbUJBQW1CLEdBQUc7TUFDMUJDLGVBQWUsRUFBRSxJQUFJO01BQ3JCQyxrQkFBa0IsRUFBRTtJQUN0QixDQUFDO0lBQ0QsSUFBSSxDQUFDQyxhQUFhLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDTCxtQkFBbUIsRUFBRUYsWUFBWSxD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