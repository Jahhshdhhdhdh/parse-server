"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enforceMasterKeyAccess = enforceMasterKeyAccess;
exports.getParseClassMutationConfig = exports.extractKeysAndInclude = void 0;
exports.toGraphQLError = toGraphQLError;
var _node = _interopRequireDefault(require("parse/node"));
var _apolloServerCore = require("apollo-server-core");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function enforceMasterKeyAccess(auth) {
  if (!auth.isMaster) {
    throw new _node.default.Error(_node.default.Error.OPERATION_FORBIDDEN, 'unauthorized: master key is required');
  }
}
function toGraphQLError(error) {
  let code, message;
  if (error instanceof _node.default.Error) {
    code = error.code;
    message = error.message;
  } else {
    code = _node.default.Error.INTERNAL_SERVER_ERROR;
    message = 'Internal server error';
  }
  return new _apolloServerCore.ApolloError(message, code);
}
const extractKeysAndInclude = selectedFields => {
  selectedFields = selectedFields.filter(field => !field.includes('__typename'));
  // Handles "id" field for both current and included objects
  selectedFields = selectedFields.map(field => {
    if (field === 'id') return 'objectId';
    return field.endsWith('.id') ? `${field.substring(0, field.lastIndexOf('.id'))}.objectId` : field;
  });
  let keys = undefined;
  let include = undefined;
  if (selectedFields.length > 0) {
    keys = [...new Set(selectedFields)].join(',');
    // We can use this shortcut since optimization is handled
    // later on RestQuery, avoid overhead here.
    include = keys;
  }
  return {
    // If authData is detected keys will not work properly
    // since authData has a special storage behavior
    // so we need to skip keys currently
    keys: keys && keys.indexOf('authData') === -1 ? keys : undefined,
    include
  };
};
exports.extractKeysAndInclude = extractKeysAndInclude;
const getParseClassMutationConfig = function (parseClassConfig) {
  return parseClassConfig && parseClassConfig.mutation || {};
};
exports.getParseClassMutationConfig = getParseClassMutationConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbm9kZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2Fwb2xsb1NlcnZlckNvcmUiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImVuZm9yY2VNYXN0ZXJLZXlBY2Nlc3MiLCJhdXRoIiwiaXNNYXN0ZXIiLCJQYXJzZSIsIkVycm9yIiwiT1BFUkFUSU9OX0ZPUkJJRERFTiIsInRvR3JhcGhRTEVycm9yIiwiZXJyb3IiLCJjb2RlIiwibWVzc2FnZSIsIklOVEVSTkFMX1NFUlZFUl9FUlJPUiIsIkFwb2xsb0Vycm9yIiwiZXh0cmFjdEtleXNBbmRJbmNsdWRlIiwic2VsZWN0ZWRGaWVsZHMiLCJmaWx0ZXIiLCJmaWVsZCIsImluY2x1ZGVzIiwibWFwIiwiZW5kc1dpdGgiLCJzdWJzdHJpbmciLCJsYXN0SW5kZXhPZiIsImtleXMiLCJ1bmRlZmluZWQiLCJpbmNsdWRlIiwibGVuZ3RoIiwiU2V0Iiwiam9pbiIsImluZGV4T2YiLCJleHBvcnRzIiwiZ2V0UGFyc2VDbGFzc011dGF0aW9uQ29uZmlnIiwicGFyc2VDbGFzc0NvbmZpZyIsIm11dGF0aW9uIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL0dyYXBoUUwvcGFyc2VHcmFwaFFMVXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBhcnNlIGZyb20gJ3BhcnNlL25vZGUnO1xuaW1wb3J0IHsgQXBvbGxvRXJyb3IgfSBmcm9tICdhcG9sbG8tc2VydmVyLWNvcmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gZW5mb3JjZU1hc3RlcktleUFjY2VzcyhhdXRoKSB7XG4gIGlmICghYXV0aC5pc01hc3Rlcikge1xuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5PUEVSQVRJT05fRk9SQklEREVOLCAndW5hdXRob3JpemVkOiBtYXN0ZXIga2V5IGlzIHJlcXVpcmVkJyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvR3JhcGhRTEVycm9yKGVycm9yKSB7XG4gIGxldCBjb2RlLCBtZXNzYWdlO1xuICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBQYXJzZS5FcnJvcikge1xuICAgIGNvZGUgPSBlcnJvci5jb2RlO1xuICAgIG1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlO1xuICB9IGVsc2Uge1xuICAgIGNvZGUgPSBQYXJzZS5FcnJvci5JTlRFUk5BTF9TRVJWRVJfRVJST1I7XG4gICAgbWVzc2FnZSA9ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InO1xuICB9XG4gIHJldHVybiBuZXcgQXBvbGxvRXJyb3IobWVzc2FnZSwgY29kZSk7XG59XG5cbmV4cG9ydCBjb25zdCBleHRyYWN0S2V5c0FuZEluY2x1ZGUgPSBzZWxlY3RlZEZpZWxkcyA9PiB7XG4gIHNlbGVjdGVkRmllbGRzID0gc2VsZWN0ZWRGaWVsZHMuZmlsdGVyKGZpZWxkID0+ICFmaWVsZC5pbmNsdWRlcygnX190eXBlbmFtZScpKTtcbiAgLy8gSGFuZGxlcyBcImlkXCIgZmllbGQgZm9yIGJvdGggY3VycmVudCBhbmQgaW5jbHVkZWQgb2JqZWN0c1xuICBzZWxlY3RlZEZpZWxkcyA9IHNlbGVjdGVkRmllbGRzLm1hcChmaWVsZCA9PiB7XG4gICAgaWYgKGZpZWxkID09PSAnaWQnKSByZXR1cm4gJ29iamVjdElkJztcbiAgICByZXR1cm4gZmllbGQuZW5kc1dpdGgoJy5pZCcpXG4gICAgICA/IGAke2ZpZWxkLnN1YnN0cmluZygwLCBmaWVsZC5sYXN0SW5kZXhPZignLmlkJykpfS5vYmplY3RJZGBcbiAgICAgIDogZmllbGQ7XG4gIH0pO1xuICBsZXQga2V5cyA9IHVuZGVmaW5lZDtcbiAgbGV0IGluY2x1ZGUgPSB1bmRlZmluZWQ7XG5cbiAgaWYgKHNlbGVjdGVkRmllbGRzLmxlbmd0aCA+IDApIHtcbiAgICBrZXlzID0gWy4uLm5ldyBTZXQoc2VsZWN0ZWRGaWVsZHMpXS5qb2luKCcsJyk7XG4gICAgLy8gV2UgY2FuIHVzZSB0aGlzIHNob3J0Y3V0IHNpbmNlIG9wdGltaXphdGlvbiBpcyBoYW5kbGVkXG4gICAgLy8gbGF0ZXIgb24gUmVzdFF1ZXJ5LCBhdm9pZCBvdmVyaGVhZCBoZXJlLlxuICAgIGluY2x1ZGUgPSBrZXlzO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICAvLyBJZiBhdXRoRGF0YSBpcyBkZXRlY3RlZCBrZXlzIHdpbGwgbm90IHdvcmsgcHJvcGVybHlcbiAgICAvLyBzaW5jZSBhdXRoRGF0YSBoYXMgYSBzcGVjaWFsIHN0b3JhZ2UgYmVoYXZpb3JcbiAgICAvLyBzbyB3ZSBuZWVkIHRvIHNraXAga2V5cyBjdXJyZW50bHlcbiAgICBrZXlzOiBrZXlzICYmIGtleXMuaW5kZXhPZignYXV0aERhdGEnKSA9PT0gLTEgPyBrZXlzIDogdW5kZWZpbmVkLFxuICAgIGluY2x1ZGUsXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UGFyc2VDbGFzc011dGF0aW9uQ29uZmlnID0gZnVuY3Rpb24gKHBhcnNlQ2xhc3NDb25maWcpIHtcbiAgcmV0dXJuIChwYXJzZUNsYXNzQ29uZmlnICYmIHBhcnNlQ2xhc3NDb25maWcubXV0YXRpb24pIHx8IHt9O1xufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFBQSxLQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxpQkFBQSxHQUFBRCxPQUFBO0FBQWlELFNBQUFELHVCQUFBRyxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBRTFDLFNBQVNHLHNCQUFzQkEsQ0FBQ0MsSUFBSSxFQUFFO0VBQzNDLElBQUksQ0FBQ0EsSUFBSSxDQUFDQyxRQUFRLEVBQUU7SUFDbEIsTUFBTSxJQUFJQyxhQUFLLENBQUNDLEtBQUssQ0FBQ0QsYUFBSyxDQUFDQyxLQUFLLENBQUNDLG1CQUFtQixFQUFFLHNDQUFzQyxDQUFDO0VBQ2hHO0FBQ0Y7QUFFTyxTQUFTQyxjQUFjQSxDQUFDQyxLQUFLLEVBQUU7RUFDcEMsSUFBSUMsSUFBSSxFQUFFQyxPQUFPO0VBQ2pCLElBQUlGLEtBQUssWUFBWUosYUFBSyxDQUFDQyxLQUFLLEVBQUU7SUFDaENJLElBQUksR0FBR0QsS0FBSyxDQUFDQyxJQUFJO0lBQ2pCQyxPQUFPLEdBQUdGLEtBQUssQ0FBQ0UsT0FBTztFQUN6QixDQUFDLE1BQU07SUFDTEQsSUFBSSxHQUFHTCxhQUFLLENBQUNDLEtBQUssQ0FBQ00scUJBQXFCO0lBQ3hDRCxPQUFPLEdBQUcsdUJBQXVCO0VBQ25DO0VBQ0EsT0FBTyxJQUFJRSw2QkFBVyxDQUFDRixPQUFPLEVBQUVELElBQUksQ0FBQztBQUN2QztBQUVPLE1BQU1JLHFCQUFxQixHQUFHQyxjQUFjLElBQUk7RUFDckRBLGNBQWMsR0FBR0EsY0FBYyxDQUFDQyxNQUFNLENBQUNDLEtBQUssSUFBSSxDQUFDQSxLQUFLLENBQUNDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztFQUM5RTtFQUNBSCxjQUFjLEdBQUdBLGNBQWMsQ0FBQ0ksR0FBRyxDQUFDRixLQUFLLElBQUk7SUFDM0MsSUFBSUEsS0FBSyxLQUFLLElBQUksRUFBRSxPQUFPLFVBQVU7SUFDckMsT0FBT0EsS0FBSyxDQUFDRyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQ3ZCLEdBQUVILEtBQUssQ0FBQ0ksU0FBUyxDQUFDLENBQUMsRUFBRUosS0FBSyxDQUFDSyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUUsV0FBVSxHQUMxREwsS0FBSztFQUNYLENBQUMsQ0FBQztFQUNGLElBQUlNLElBQUksR0FBR0MsU0FBUztFQUNwQixJQUFJQyxPQUFPLEdBQUdELFNBQVM7RUFFdkIsSUFBSVQsY0FBYyxDQUFDVyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0lBQzdCSCxJQUFJLEdBQUcsQ0FBQyxHQUFHLElBQUlJLEdBQUcsQ0FBQ1osY0FBYyxDQUFDLENBQUMsQ0FBQ2EsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUM3QztJQUNBO0lBQ0FILE9BQU8sR0FBR0YsSUFBSTtFQUNoQjtFQUVBLE9BQU87SUFDTDtJQUNBO0lBQ0E7SUFDQUEsSUFBSSxFQUFFQSxJQUFJLElBQUlBLElBQUksQ0FBQ00sT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHTixJQUFJLEdBQUdDLFNBQVM7SUFDaEVDO0VBQ0YsQ0FBQztBQUNILENBQUM7QUFBQ0ssT0FBQSxDQUFBaEIscUJBQUEsR0FBQUEscUJBQUE7QUFFSyxNQUFNaUIsMkJBQTJCLEdBQUcsU0FBQUEsQ0FBVUMsZ0JBQWdCLEVBQUU7RUFDckUsT0FBUUEsZ0JBQWdCLElBQUlBLGdCQUFnQixDQUFDQyxRQUFRLElBQUssQ0FBQyxDQUFDO0FBQzlELENBQUM7QUFBQ0gsT0FBQSxDQUFBQywyQkFBQSxHQUFBQSwyQkFBQSJ9