"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParseWebSocketServer = exports.ParseWebSocket = void 0;
var _AdapterLoader = require("../Adapters/AdapterLoader");
var _WSAdapter = require("../Adapters/WebSocketServer/WSAdapter");
var _logger = _interopRequireDefault(require("../logger"));
var _events = _interopRequireDefault(require("events"));
var _util = require("util");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class ParseWebSocketServer {
  constructor(server, onConnect, config) {
    config.server = server;
    const wss = (0, _AdapterLoader.loadAdapter)(config.wssAdapter, _WSAdapter.WSAdapter, config);
    wss.onListen = () => {
      _logger.default.info('Parse LiveQuery Server started running');
    };
    wss.onConnection = ws => {
      ws.on('error', error => {
        _logger.default.error(error.message);
        _logger.default.error((0, _util.inspect)(ws, false));
      });
      onConnect(new ParseWebSocket(ws));
      // Send ping to client periodically
      const pingIntervalId = setInterval(() => {
        if (ws.readyState == ws.OPEN) {
          ws.ping();
        } else {
          clearInterval(pingIntervalId);
        }
      }, config.websocketTimeout || 10 * 1000);
    };
    wss.onError = error => {
      _logger.default.error(error);
    };
    wss.start();
    this.server = wss;
  }
  close() {
    if (this.server && this.server.close) {
      this.server.close();
    }
  }
}
exports.ParseWebSocketServer = ParseWebSocketServer;
class ParseWebSocket extends _events.default.EventEmitter {
  constructor(ws) {
    super();
    ws.onmessage = request => this.emit('message', request && request.data ? request.data : request);
    ws.onclose = () => this.emit('disconnect');
    this.ws = ws;
  }
  send(message) {
    this.ws.send(message);
  }
}
exports.ParseWebSocket = ParseWebSocket;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfQWRhcHRlckxvYWRlciIsInJlcXVpcmUiLCJfV1NBZGFwdGVyIiwiX2xvZ2dlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfZXZlbnRzIiwiX3V0aWwiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIlBhcnNlV2ViU29ja2V0U2VydmVyIiwiY29uc3RydWN0b3IiLCJzZXJ2ZXIiLCJvbkNvbm5lY3QiLCJjb25maWciLCJ3c3MiLCJsb2FkQWRhcHRlciIsIndzc0FkYXB0ZXIiLCJXU0FkYXB0ZXIiLCJvbkxpc3RlbiIsImxvZ2dlciIsImluZm8iLCJvbkNvbm5lY3Rpb24iLCJ3cyIsIm9uIiwiZXJyb3IiLCJtZXNzYWdlIiwiaW5zcGVjdCIsIlBhcnNlV2ViU29ja2V0IiwicGluZ0ludGVydmFsSWQiLCJzZXRJbnRlcnZhbCIsInJlYWR5U3RhdGUiLCJPUEVOIiwicGluZyIsImNsZWFySW50ZXJ2YWwiLCJ3ZWJzb2NrZXRUaW1lb3V0Iiwib25FcnJvciIsInN0YXJ0IiwiY2xvc2UiLCJleHBvcnRzIiwiZXZlbnRzIiwiRXZlbnRFbWl0dGVyIiwib25tZXNzYWdlIiwicmVxdWVzdCIsImVtaXQiLCJkYXRhIiwib25jbG9zZSIsInNlbmQiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvTGl2ZVF1ZXJ5L1BhcnNlV2ViU29ja2V0U2VydmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxvYWRBZGFwdGVyIH0gZnJvbSAnLi4vQWRhcHRlcnMvQWRhcHRlckxvYWRlcic7XG5pbXBvcnQgeyBXU0FkYXB0ZXIgfSBmcm9tICcuLi9BZGFwdGVycy9XZWJTb2NrZXRTZXJ2ZXIvV1NBZGFwdGVyJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCBldmVudHMgZnJvbSAnZXZlbnRzJztcbmltcG9ydCB7IGluc3BlY3QgfSBmcm9tICd1dGlsJztcblxuZXhwb3J0IGNsYXNzIFBhcnNlV2ViU29ja2V0U2VydmVyIHtcbiAgc2VydmVyOiBPYmplY3Q7XG5cbiAgY29uc3RydWN0b3Ioc2VydmVyOiBhbnksIG9uQ29ubmVjdDogRnVuY3Rpb24sIGNvbmZpZykge1xuICAgIGNvbmZpZy5zZXJ2ZXIgPSBzZXJ2ZXI7XG4gICAgY29uc3Qgd3NzID0gbG9hZEFkYXB0ZXIoY29uZmlnLndzc0FkYXB0ZXIsIFdTQWRhcHRlciwgY29uZmlnKTtcbiAgICB3c3Mub25MaXN0ZW4gPSAoKSA9PiB7XG4gICAgICBsb2dnZXIuaW5mbygnUGFyc2UgTGl2ZVF1ZXJ5IFNlcnZlciBzdGFydGVkIHJ1bm5pbmcnKTtcbiAgICB9O1xuICAgIHdzcy5vbkNvbm5lY3Rpb24gPSB3cyA9PiB7XG4gICAgICB3cy5vbignZXJyb3InLCBlcnJvciA9PiB7XG4gICAgICAgIGxvZ2dlci5lcnJvcihlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgbG9nZ2VyLmVycm9yKGluc3BlY3Qod3MsIGZhbHNlKSk7XG4gICAgICB9KTtcbiAgICAgIG9uQ29ubmVjdChuZXcgUGFyc2VXZWJTb2NrZXQod3MpKTtcbiAgICAgIC8vIFNlbmQgcGluZyB0byBjbGllbnQgcGVyaW9kaWNhbGx5XG4gICAgICBjb25zdCBwaW5nSW50ZXJ2YWxJZCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgaWYgKHdzLnJlYWR5U3RhdGUgPT0gd3MuT1BFTikge1xuICAgICAgICAgIHdzLnBpbmcoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjbGVhckludGVydmFsKHBpbmdJbnRlcnZhbElkKTtcbiAgICAgICAgfVxuICAgICAgfSwgY29uZmlnLndlYnNvY2tldFRpbWVvdXQgfHwgMTAgKiAxMDAwKTtcbiAgICB9O1xuICAgIHdzcy5vbkVycm9yID0gZXJyb3IgPT4ge1xuICAgICAgbG9nZ2VyLmVycm9yKGVycm9yKTtcbiAgICB9O1xuICAgIHdzcy5zdGFydCgpO1xuICAgIHRoaXMuc2VydmVyID0gd3NzO1xuICB9XG5cbiAgY2xvc2UoKSB7XG4gICAgaWYgKHRoaXMuc2VydmVyICYmIHRoaXMuc2VydmVyLmNsb3NlKSB7XG4gICAgICB0aGlzLnNlcnZlci5jbG9zZSgpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUGFyc2VXZWJTb2NrZXQgZXh0ZW5kcyBldmVudHMuRXZlbnRFbWl0dGVyIHtcbiAgd3M6IGFueTtcblxuICBjb25zdHJ1Y3Rvcih3czogYW55KSB7XG4gICAgc3VwZXIoKTtcbiAgICB3cy5vbm1lc3NhZ2UgPSByZXF1ZXN0ID0+XG4gICAgICB0aGlzLmVtaXQoJ21lc3NhZ2UnLCByZXF1ZXN0ICYmIHJlcXVlc3QuZGF0YSA/IHJlcXVlc3QuZGF0YSA6IHJlcXVlc3QpO1xuICAgIHdzLm9uY2xvc2UgPSAoKSA9PiB0aGlzLmVtaXQoJ2Rpc2Nvbm5lY3QnKTtcbiAgICB0aGlzLndzID0gd3M7XG4gIH1cblxuICBzZW5kKG1lc3NhZ2U6IGFueSk6IHZvaWQge1xuICAgIHRoaXMud3Muc2VuZChtZXNzYWdlKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxjQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFDLHNCQUFBLENBQUFILE9BQUE7QUFDQSxJQUFBSSxPQUFBLEdBQUFELHNCQUFBLENBQUFILE9BQUE7QUFDQSxJQUFBSyxLQUFBLEdBQUFMLE9BQUE7QUFBK0IsU0FBQUcsdUJBQUFHLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFFeEIsTUFBTUcsb0JBQW9CLENBQUM7RUFHaENDLFdBQVdBLENBQUNDLE1BQVcsRUFBRUMsU0FBbUIsRUFBRUMsTUFBTSxFQUFFO0lBQ3BEQSxNQUFNLENBQUNGLE1BQU0sR0FBR0EsTUFBTTtJQUN0QixNQUFNRyxHQUFHLEdBQUcsSUFBQUMsMEJBQVcsRUFBQ0YsTUFBTSxDQUFDRyxVQUFVLEVBQUVDLG9CQUFTLEVBQUVKLE1BQU0sQ0FBQztJQUM3REMsR0FBRyxDQUFDSSxRQUFRLEdBQUcsTUFBTTtNQUNuQkMsZUFBTSxDQUFDQyxJQUFJLENBQUMsd0NBQXdDLENBQUM7SUFDdkQsQ0FBQztJQUNETixHQUFHLENBQUNPLFlBQVksR0FBR0MsRUFBRSxJQUFJO01BQ3ZCQSxFQUFFLENBQUNDLEVBQUUsQ0FBQyxPQUFPLEVBQUVDLEtBQUssSUFBSTtRQUN0QkwsZUFBTSxDQUFDSyxLQUFLLENBQUNBLEtBQUssQ0FBQ0MsT0FBTyxDQUFDO1FBQzNCTixlQUFNLENBQUNLLEtBQUssQ0FBQyxJQUFBRSxhQUFPLEVBQUNKLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztNQUNsQyxDQUFDLENBQUM7TUFDRlYsU0FBUyxDQUFDLElBQUllLGNBQWMsQ0FBQ0wsRUFBRSxDQUFDLENBQUM7TUFDakM7TUFDQSxNQUFNTSxjQUFjLEdBQUdDLFdBQVcsQ0FBQyxNQUFNO1FBQ3ZDLElBQUlQLEVBQUUsQ0FBQ1EsVUFBVSxJQUFJUixFQUFFLENBQUNTLElBQUksRUFBRTtVQUM1QlQsRUFBRSxDQUFDVSxJQUFJLEVBQUU7UUFDWCxDQUFDLE1BQU07VUFDTEMsYUFBYSxDQUFDTCxjQUFjLENBQUM7UUFDL0I7TUFDRixDQUFDLEVBQUVmLE1BQU0sQ0FBQ3FCLGdCQUFnQixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFDMUMsQ0FBQztJQUNEcEIsR0FBRyxDQUFDcUIsT0FBTyxHQUFHWCxLQUFLLElBQUk7TUFDckJMLGVBQU0sQ0FBQ0ssS0FBSyxDQUFDQSxLQUFLLENBQUM7SUFDckIsQ0FBQztJQUNEVixHQUFHLENBQUNzQixLQUFLLEVBQUU7SUFDWCxJQUFJLENBQUN6QixNQUFNLEdBQUdHLEdBQUc7RUFDbkI7RUFFQXVCLEtBQUtBLENBQUEsRUFBRztJQUNOLElBQUksSUFBSSxDQUFDMUIsTUFBTSxJQUFJLElBQUksQ0FBQ0EsTUFBTSxDQUFDMEIsS0FBSyxFQUFFO01BQ3BDLElBQUksQ0FBQzFCLE1BQU0sQ0FBQzBCLEtBQUssRUFBRTtJQUNyQjtFQUNGO0FBQ0Y7QUFBQ0MsT0FBQSxDQUFBN0Isb0JBQUEsR0FBQUEsb0JBQUE7QUFFTSxNQUFNa0IsY0FBYyxTQUFTWSxlQUFNLENBQUNDLFlBQVksQ0FBQztFQUd0RDlCLFdBQVdBLENBQUNZLEVBQU8sRUFBRTtJQUNuQixLQUFLLEVBQUU7SUFDUEEsRUFBRSxDQUFDbUIsU0FBUyxHQUFHQyxPQUFPLElBQ3BCLElBQUksQ0FBQ0MsSUFBSSxDQUFDLFNBQVMsRUFBRUQsT0FBTyxJQUFJQSxPQUFPLENBQUNFLElBQUksR0FBR0YsT0FBTyxDQUFDRSxJQUFJLEdBQUdGLE9BQU8sQ0FBQztJQUN4RXBCLEVBQUUsQ0FBQ3VCLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQ0YsSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMxQyxJQUFJLENBQUNyQixFQUFFLEdBQUdBLEVBQUU7RUFDZDtFQUVBd0IsSUFBSUEsQ0FBQ3JCLE9BQVksRUFBUTtJQUN2QixJQUFJLENBQUNILEVBQUUsQ0FBQ3dCLElBQUksQ0FBQ3JCLE9BQU8sQ0FBQztFQUN2QjtBQUNGO0FBQUNhLE9BQUEsQ0FBQVgsY0FBQSxHQUFBQSxjQUFBIn0=