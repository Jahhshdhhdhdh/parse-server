"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParseCloudCodePublisher = void 0;

var _ParsePubSub = require("./ParsePubSub");

var _node = _interopRequireDefault(require("parse/node"));

var _logger = _interopRequireDefault(require("../logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ParseCloudCodePublisher {
  // config object of the publisher, right now it only contains the redisURL,
  // but we may extend it later.
  constructor(config = {}) {
    this.parsePublisher = _ParsePubSub.ParsePubSub.createPublisher(config);
  }

  onCloudCodeAfterSave(request) {
    this._onCloudCodeMessage(_node.default.applicationId + 'afterSave', request);
  }

  onCloudCodeAfterDelete(request) {
    this._onCloudCodeMessage(_node.default.applicationId + 'afterDelete', request);
  }

  onClearCachedRoles(user) {
    this.parsePublisher.publish(_node.default.applicationId + 'clearCache', JSON.stringify({
      userId: user.id
    }));
  } // Request is the request object from cloud code functions. request.object is a ParseObject.


  _onCloudCodeMessage(type, request) {
    _logger.default.verbose('Raw request from cloud code current : %j | original : %j', request.object, request.original); // We need the full JSON which includes className


    const message = {
      currentParseObject: request.object._toFullJSON()
    };

    if (request.original) {
      message.originalParseObject = request.original._toFullJSON();
    }

    this.parsePublisher.publish(type, JSON.stringify(message));
  }

}

exports.ParseCloudCodePublisher = ParseCloudCodePublisher;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQYXJzZUNsb3VkQ29kZVB1Ymxpc2hlciIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwicGFyc2VQdWJsaXNoZXIiLCJQYXJzZVB1YlN1YiIsImNyZWF0ZVB1Ymxpc2hlciIsIm9uQ2xvdWRDb2RlQWZ0ZXJTYXZlIiwicmVxdWVzdCIsIl9vbkNsb3VkQ29kZU1lc3NhZ2UiLCJQYXJzZSIsImFwcGxpY2F0aW9uSWQiLCJvbkNsb3VkQ29kZUFmdGVyRGVsZXRlIiwib25DbGVhckNhY2hlZFJvbGVzIiwidXNlciIsInB1Ymxpc2giLCJKU09OIiwic3RyaW5naWZ5IiwidXNlcklkIiwiaWQiLCJ0eXBlIiwibG9nZ2VyIiwidmVyYm9zZSIsIm9iamVjdCIsIm9yaWdpbmFsIiwibWVzc2FnZSIsImN1cnJlbnRQYXJzZU9iamVjdCIsIl90b0Z1bGxKU09OIiwib3JpZ2luYWxQYXJzZU9iamVjdCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9MaXZlUXVlcnkvUGFyc2VDbG91ZENvZGVQdWJsaXNoZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFyc2VQdWJTdWIgfSBmcm9tICcuL1BhcnNlUHViU3ViJztcbmltcG9ydCBQYXJzZSBmcm9tICdwYXJzZS9ub2RlJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi4vbG9nZ2VyJztcblxuY2xhc3MgUGFyc2VDbG91ZENvZGVQdWJsaXNoZXIge1xuICBwYXJzZVB1Ymxpc2hlcjogT2JqZWN0O1xuXG4gIC8vIGNvbmZpZyBvYmplY3Qgb2YgdGhlIHB1Ymxpc2hlciwgcmlnaHQgbm93IGl0IG9ubHkgY29udGFpbnMgdGhlIHJlZGlzVVJMLFxuICAvLyBidXQgd2UgbWF5IGV4dGVuZCBpdCBsYXRlci5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBhbnkgPSB7fSkge1xuICAgIHRoaXMucGFyc2VQdWJsaXNoZXIgPSBQYXJzZVB1YlN1Yi5jcmVhdGVQdWJsaXNoZXIoY29uZmlnKTtcbiAgfVxuXG4gIG9uQ2xvdWRDb2RlQWZ0ZXJTYXZlKHJlcXVlc3Q6IGFueSk6IHZvaWQge1xuICAgIHRoaXMuX29uQ2xvdWRDb2RlTWVzc2FnZShQYXJzZS5hcHBsaWNhdGlvbklkICsgJ2FmdGVyU2F2ZScsIHJlcXVlc3QpO1xuICB9XG5cbiAgb25DbG91ZENvZGVBZnRlckRlbGV0ZShyZXF1ZXN0OiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLl9vbkNsb3VkQ29kZU1lc3NhZ2UoUGFyc2UuYXBwbGljYXRpb25JZCArICdhZnRlckRlbGV0ZScsIHJlcXVlc3QpO1xuICB9XG5cbiAgb25DbGVhckNhY2hlZFJvbGVzKHVzZXI6IFBhcnNlLk9iamVjdCkge1xuICAgIHRoaXMucGFyc2VQdWJsaXNoZXIucHVibGlzaChcbiAgICAgIFBhcnNlLmFwcGxpY2F0aW9uSWQgKyAnY2xlYXJDYWNoZScsXG4gICAgICBKU09OLnN0cmluZ2lmeSh7IHVzZXJJZDogdXNlci5pZCB9KVxuICAgICk7XG4gIH1cblxuICAvLyBSZXF1ZXN0IGlzIHRoZSByZXF1ZXN0IG9iamVjdCBmcm9tIGNsb3VkIGNvZGUgZnVuY3Rpb25zLiByZXF1ZXN0Lm9iamVjdCBpcyBhIFBhcnNlT2JqZWN0LlxuICBfb25DbG91ZENvZGVNZXNzYWdlKHR5cGU6IHN0cmluZywgcmVxdWVzdDogYW55KTogdm9pZCB7XG4gICAgbG9nZ2VyLnZlcmJvc2UoXG4gICAgICAnUmF3IHJlcXVlc3QgZnJvbSBjbG91ZCBjb2RlIGN1cnJlbnQgOiAlaiB8IG9yaWdpbmFsIDogJWonLFxuICAgICAgcmVxdWVzdC5vYmplY3QsXG4gICAgICByZXF1ZXN0Lm9yaWdpbmFsXG4gICAgKTtcbiAgICAvLyBXZSBuZWVkIHRoZSBmdWxsIEpTT04gd2hpY2ggaW5jbHVkZXMgY2xhc3NOYW1lXG4gICAgY29uc3QgbWVzc2FnZSA9IHtcbiAgICAgIGN1cnJlbnRQYXJzZU9iamVjdDogcmVxdWVzdC5vYmplY3QuX3RvRnVsbEpTT04oKSxcbiAgICB9O1xuICAgIGlmIChyZXF1ZXN0Lm9yaWdpbmFsKSB7XG4gICAgICBtZXNzYWdlLm9yaWdpbmFsUGFyc2VPYmplY3QgPSByZXF1ZXN0Lm9yaWdpbmFsLl90b0Z1bGxKU09OKCk7XG4gICAgfVxuICAgIHRoaXMucGFyc2VQdWJsaXNoZXIucHVibGlzaCh0eXBlLCBKU09OLnN0cmluZ2lmeShtZXNzYWdlKSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgUGFyc2VDbG91ZENvZGVQdWJsaXNoZXIgfTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7O0FBRUEsTUFBTUEsdUJBQU4sQ0FBOEI7RUFHNUI7RUFDQTtFQUNBQyxXQUFXLENBQUNDLE1BQVcsR0FBRyxFQUFmLEVBQW1CO0lBQzVCLEtBQUtDLGNBQUwsR0FBc0JDLHdCQUFBLENBQVlDLGVBQVosQ0FBNEJILE1BQTVCLENBQXRCO0VBQ0Q7O0VBRURJLG9CQUFvQixDQUFDQyxPQUFELEVBQXFCO0lBQ3ZDLEtBQUtDLG1CQUFMLENBQXlCQyxhQUFBLENBQU1DLGFBQU4sR0FBc0IsV0FBL0MsRUFBNERILE9BQTVEO0VBQ0Q7O0VBRURJLHNCQUFzQixDQUFDSixPQUFELEVBQXFCO0lBQ3pDLEtBQUtDLG1CQUFMLENBQXlCQyxhQUFBLENBQU1DLGFBQU4sR0FBc0IsYUFBL0MsRUFBOERILE9BQTlEO0VBQ0Q7O0VBRURLLGtCQUFrQixDQUFDQyxJQUFELEVBQXFCO0lBQ3JDLEtBQUtWLGNBQUwsQ0FBb0JXLE9BQXBCLENBQ0VMLGFBQUEsQ0FBTUMsYUFBTixHQUFzQixZQUR4QixFQUVFSyxJQUFJLENBQUNDLFNBQUwsQ0FBZTtNQUFFQyxNQUFNLEVBQUVKLElBQUksQ0FBQ0s7SUFBZixDQUFmLENBRkY7RUFJRCxDQXRCMkIsQ0F3QjVCOzs7RUFDQVYsbUJBQW1CLENBQUNXLElBQUQsRUFBZVosT0FBZixFQUFtQztJQUNwRGEsZUFBQSxDQUFPQyxPQUFQLENBQ0UsMERBREYsRUFFRWQsT0FBTyxDQUFDZSxNQUZWLEVBR0VmLE9BQU8sQ0FBQ2dCLFFBSFYsRUFEb0QsQ0FNcEQ7OztJQUNBLE1BQU1DLE9BQU8sR0FBRztNQUNkQyxrQkFBa0IsRUFBRWxCLE9BQU8sQ0FBQ2UsTUFBUixDQUFlSSxXQUFmO0lBRE4sQ0FBaEI7O0lBR0EsSUFBSW5CLE9BQU8sQ0FBQ2dCLFFBQVosRUFBc0I7TUFDcEJDLE9BQU8sQ0FBQ0csbUJBQVIsR0FBOEJwQixPQUFPLENBQUNnQixRQUFSLENBQWlCRyxXQUFqQixFQUE5QjtJQUNEOztJQUNELEtBQUt2QixjQUFMLENBQW9CVyxPQUFwQixDQUE0QkssSUFBNUIsRUFBa0NKLElBQUksQ0FBQ0MsU0FBTCxDQUFlUSxPQUFmLENBQWxDO0VBQ0Q7O0FBdkMyQiJ9