"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PushQueue = void 0;
var _ParseMessageQueue = require("../ParseMessageQueue");
var _rest = _interopRequireDefault(require("../rest"));
var _utils = require("./utils");
var _node = _interopRequireDefault(require("parse/node"));
var _logger = _interopRequireDefault(require("../logger"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const PUSH_CHANNEL = 'parse-server-push';
const DEFAULT_BATCH_SIZE = 100;
class PushQueue {
  // config object of the publisher, right now it only contains the redisURL,
  // but we may extend it later.
  constructor(config = {}) {
    this.channel = config.channel || PushQueue.defaultPushChannel();
    this.batchSize = config.batchSize || DEFAULT_BATCH_SIZE;
    this.parsePublisher = _ParseMessageQueue.ParseMessageQueue.createPublisher(config);
  }
  static defaultPushChannel() {
    return `${_node.default.applicationId}-${PUSH_CHANNEL}`;
  }
  enqueue(body, where, config, auth, pushStatus) {
    const limit = this.batchSize;
    where = (0, _utils.applyDeviceTokenExists)(where);

    // Order by objectId so no impact on the DB
    // const order = 'objectId';
    return Promise.resolve().then(() => {
      return _rest.default.find(config, auth, '_Installation', where, {
        limit: 0,
        count: true
      });
    }).then(({
      results,
      count
    }) => {
      if (!results || count == 0) {
        return pushStatus.complete();
      }
      const maxPages = Math.ceil(count / limit);
      pushStatus.setRunning(maxPages);
      // while (page < maxPages) {
      // changes request/limit/orderBy by id range intervals for better performance
      // https://docs.mongodb.com/manual/reference/method/cursor.skip/
      // Range queries can use indexes to avoid scanning unwanted documents,
      // typically yielding better performance as the offset grows compared
      // to using cursor.skip() for pagination.
      const query = {
        where
      };
      const pushWorkItem = {
        body,
        query,
        maxPages,
        pushStatus: {
          objectId: pushStatus.objectId
        },
        applicationId: config.applicationId
      };
      const publishResult = Promise.resolve(this.parsePublisher.publish(this.channel, JSON.stringify(pushWorkItem)));
      return publishResult.then(reponse => {
        const result = reponse && reponse.data || reponse;
        _logger.default.info(`All ${maxPages} packages were enqueued for PushStatus ${pushStatus.objectId}`, result);
        return result;
      });
    }).catch(err => {
      _logger.default.info(`Can't count installations for PushStatus ${pushStatus.objectId}: ${err.message}`);
      throw err;
    });
  }
}
exports.PushQueue = PushQueue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUGFyc2VNZXNzYWdlUXVldWUiLCJyZXF1aXJlIiwiX3Jlc3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3V0aWxzIiwiX25vZGUiLCJfbG9nZ2VyIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJQVVNIX0NIQU5ORUwiLCJERUZBVUxUX0JBVENIX1NJWkUiLCJQdXNoUXVldWUiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsImNoYW5uZWwiLCJkZWZhdWx0UHVzaENoYW5uZWwiLCJiYXRjaFNpemUiLCJwYXJzZVB1Ymxpc2hlciIsIlBhcnNlTWVzc2FnZVF1ZXVlIiwiY3JlYXRlUHVibGlzaGVyIiwiUGFyc2UiLCJhcHBsaWNhdGlvbklkIiwiZW5xdWV1ZSIsImJvZHkiLCJ3aGVyZSIsImF1dGgiLCJwdXNoU3RhdHVzIiwibGltaXQiLCJhcHBseURldmljZVRva2VuRXhpc3RzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwicmVzdCIsImZpbmQiLCJjb3VudCIsInJlc3VsdHMiLCJjb21wbGV0ZSIsIm1heFBhZ2VzIiwiTWF0aCIsImNlaWwiLCJzZXRSdW5uaW5nIiwicXVlcnkiLCJwdXNoV29ya0l0ZW0iLCJvYmplY3RJZCIsInB1Ymxpc2hSZXN1bHQiLCJwdWJsaXNoIiwiSlNPTiIsInN0cmluZ2lmeSIsInJlcG9uc2UiLCJyZXN1bHQiLCJkYXRhIiwibG9nIiwiaW5mbyIsImNhdGNoIiwiZXJyIiwibWVzc2FnZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvUHVzaC9QdXNoUXVldWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFyc2VNZXNzYWdlUXVldWUgfSBmcm9tICcuLi9QYXJzZU1lc3NhZ2VRdWV1ZSc7XG5pbXBvcnQgcmVzdCBmcm9tICcuLi9yZXN0JztcbmltcG9ydCB7IGFwcGx5RGV2aWNlVG9rZW5FeGlzdHMgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBQYXJzZSBmcm9tICdwYXJzZS9ub2RlJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcblxuY29uc3QgUFVTSF9DSEFOTkVMID0gJ3BhcnNlLXNlcnZlci1wdXNoJztcbmNvbnN0IERFRkFVTFRfQkFUQ0hfU0laRSA9IDEwMDtcblxuZXhwb3J0IGNsYXNzIFB1c2hRdWV1ZSB7XG4gIHBhcnNlUHVibGlzaGVyOiBPYmplY3Q7XG4gIGNoYW5uZWw6IFN0cmluZztcbiAgYmF0Y2hTaXplOiBOdW1iZXI7XG5cbiAgLy8gY29uZmlnIG9iamVjdCBvZiB0aGUgcHVibGlzaGVyLCByaWdodCBub3cgaXQgb25seSBjb250YWlucyB0aGUgcmVkaXNVUkwsXG4gIC8vIGJ1dCB3ZSBtYXkgZXh0ZW5kIGl0IGxhdGVyLlxuICBjb25zdHJ1Y3Rvcihjb25maWc6IGFueSA9IHt9KSB7XG4gICAgdGhpcy5jaGFubmVsID0gY29uZmlnLmNoYW5uZWwgfHwgUHVzaFF1ZXVlLmRlZmF1bHRQdXNoQ2hhbm5lbCgpO1xuICAgIHRoaXMuYmF0Y2hTaXplID0gY29uZmlnLmJhdGNoU2l6ZSB8fCBERUZBVUxUX0JBVENIX1NJWkU7XG4gICAgdGhpcy5wYXJzZVB1Ymxpc2hlciA9IFBhcnNlTWVzc2FnZVF1ZXVlLmNyZWF0ZVB1Ymxpc2hlcihjb25maWcpO1xuICB9XG5cbiAgc3RhdGljIGRlZmF1bHRQdXNoQ2hhbm5lbCgpIHtcbiAgICByZXR1cm4gYCR7UGFyc2UuYXBwbGljYXRpb25JZH0tJHtQVVNIX0NIQU5ORUx9YDtcbiAgfVxuXG4gIGVucXVldWUoYm9keSwgd2hlcmUsIGNvbmZpZywgYXV0aCwgcHVzaFN0YXR1cykge1xuICAgIGNvbnN0IGxpbWl0ID0gdGhpcy5iYXRjaFNpemU7XG5cbiAgICB3aGVyZSA9IGFwcGx5RGV2aWNlVG9rZW5FeGlzdHMod2hlcmUpO1xuXG4gICAgLy8gT3JkZXIgYnkgb2JqZWN0SWQgc28gbm8gaW1wYWN0IG9uIHRoZSBEQlxuICAgIC8vIGNvbnN0IG9yZGVyID0gJ29iamVjdElkJztcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIHJlc3QuZmluZChjb25maWcsIGF1dGgsICdfSW5zdGFsbGF0aW9uJywgd2hlcmUsIHtcbiAgICAgICAgICBsaW1pdDogMCxcbiAgICAgICAgICBjb3VudDogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKHsgcmVzdWx0cywgY291bnQgfSkgPT4ge1xuICAgICAgICBpZiAoIXJlc3VsdHMgfHwgY291bnQgPT0gMCkge1xuICAgICAgICAgIHJldHVybiBwdXNoU3RhdHVzLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWF4UGFnZXMgPSBNYXRoLmNlaWwoY291bnQgLyBsaW1pdCk7XG4gICAgICAgIHB1c2hTdGF0dXMuc2V0UnVubmluZyhtYXhQYWdlcyk7XG4gICAgICAgIC8vIHdoaWxlIChwYWdlIDwgbWF4UGFnZXMpIHtcbiAgICAgICAgLy8gY2hhbmdlcyByZXF1ZXN0L2xpbWl0L29yZGVyQnkgYnkgaWQgcmFuZ2UgaW50ZXJ2YWxzIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2VcbiAgICAgICAgLy8gaHR0cHM6Ly9kb2NzLm1vbmdvZGIuY29tL21hbnVhbC9yZWZlcmVuY2UvbWV0aG9kL2N1cnNvci5za2lwL1xuICAgICAgICAvLyBSYW5nZSBxdWVyaWVzIGNhbiB1c2UgaW5kZXhlcyB0byBhdm9pZCBzY2FubmluZyB1bndhbnRlZCBkb2N1bWVudHMsXG4gICAgICAgIC8vIHR5cGljYWxseSB5aWVsZGluZyBiZXR0ZXIgcGVyZm9ybWFuY2UgYXMgdGhlIG9mZnNldCBncm93cyBjb21wYXJlZFxuICAgICAgICAvLyB0byB1c2luZyBjdXJzb3Iuc2tpcCgpIGZvciBwYWdpbmF0aW9uLlxuICAgICAgICBjb25zdCBxdWVyeSA9IHsgd2hlcmUgfTtcblxuICAgICAgICBjb25zdCBwdXNoV29ya0l0ZW0gPSB7XG4gICAgICAgICAgYm9keSxcbiAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICBtYXhQYWdlcyxcbiAgICAgICAgICBwdXNoU3RhdHVzOiB7IG9iamVjdElkOiBwdXNoU3RhdHVzLm9iamVjdElkIH0sXG4gICAgICAgICAgYXBwbGljYXRpb25JZDogY29uZmlnLmFwcGxpY2F0aW9uSWQsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHB1Ymxpc2hSZXN1bHQgPSBQcm9taXNlLnJlc29sdmUoXG4gICAgICAgICAgdGhpcy5wYXJzZVB1Ymxpc2hlci5wdWJsaXNoKFxuICAgICAgICAgICAgdGhpcy5jaGFubmVsLFxuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkocHVzaFdvcmtJdGVtKVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHB1Ymxpc2hSZXN1bHQudGhlbihyZXBvbnNlID0+IHtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSAocmVwb25zZSAmJiByZXBvbnNlLmRhdGEpIHx8IHJlcG9uc2U7XG4gICAgICAgICAgbG9nLmluZm8oXG4gICAgICAgICAgICBgQWxsICR7bWF4UGFnZXN9IHBhY2thZ2VzIHdlcmUgZW5xdWV1ZWQgZm9yIFB1c2hTdGF0dXMgJHtcbiAgICAgICAgICAgICAgcHVzaFN0YXR1cy5vYmplY3RJZFxuICAgICAgICAgICAgfWAsXG4gICAgICAgICAgICByZXN1bHRcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICBsb2cuaW5mbyhcbiAgICAgICAgICBgQ2FuJ3QgY291bnQgaW5zdGFsbGF0aW9ucyBmb3IgUHVzaFN0YXR1cyAke3B1c2hTdGF0dXMub2JqZWN0SWR9OiAke1xuICAgICAgICAgICAgZXJyLm1lc3NhZ2VcbiAgICAgICAgICB9YFxuICAgICAgICApO1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9KTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFB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