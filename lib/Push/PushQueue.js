"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PushQueue = void 0;

var _ParseMessageQueue = require("../ParseMessageQueue");

var _rest = _interopRequireDefault(require("../rest"));

var _utils = require("./utils");

var _node = _interopRequireDefault(require("parse/node"));

var _logger = _interopRequireDefault(require("../logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const PUSH_CHANNEL = 'parse-server-push';
const DEFAULT_BATCH_SIZE = 100;

class PushQueue {
  // config object of the publisher, right now it only contains the redisURL,
  // but we may extend it later.
  constructor(config = {}) {
    this.channel = config.channel || PushQueue.defaultPushChannel();
    this.batchSize = config.batchSize || DEFAULT_BATCH_SIZE;
    this.parsePublisher = _ParseMessageQueue.ParseMessageQueue.createPublisher(config);
  }

  static defaultPushChannel() {
    return `${_node.default.applicationId}-${PUSH_CHANNEL}`;
  }

  enqueue(body, where, config, auth, pushStatus) {
    const limit = this.batchSize;
    where = (0, _utils.applyDeviceTokenExists)(where); // Order by objectId so no impact on the DB
    // const order = 'objectId';

    return Promise.resolve().then(() => {
      return _rest.default.find(config, auth, '_Installation', where, {
        limit: 0,
        count: true
      });
    }).then(({
      results,
      count
    }) => {
      if (!results || count == 0) {
        return pushStatus.complete();
      }

      const maxPages = Math.ceil(count / limit);
      pushStatus.setRunning(maxPages); // while (page < maxPages) {
      // changes request/limit/orderBy by id range intervals for better performance
      // https://docs.mongodb.com/manual/reference/method/cursor.skip/
      // Range queries can use indexes to avoid scanning unwanted documents,
      // typically yielding better performance as the offset grows compared
      // to using cursor.skip() for pagination.

      const query = {
        where
      };
      const pushWorkItem = {
        body,
        query,
        maxPages,
        pushStatus: {
          objectId: pushStatus.objectId
        },
        applicationId: config.applicationId
      };
      const publishResult = Promise.resolve(this.parsePublisher.publish(this.channel, JSON.stringify(pushWorkItem)));
      return publishResult.then(reponse => {
        const result = reponse && reponse.data || reponse;

        _logger.default.info(`All ${maxPages} packages were enqueued for PushStatus ${pushStatus.objectId}`, result);

        return result;
      });
    }).catch(err => {
      _logger.default.info(`Can't count installations for PushStatus ${pushStatus.objectId}: ${err.message}`);

      throw err;
    });
  }

}

exports.PushQueue = PushQueue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQVVNIX0NIQU5ORUwiLCJERUZBVUxUX0JBVENIX1NJWkUiLCJQdXNoUXVldWUiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsImNoYW5uZWwiLCJkZWZhdWx0UHVzaENoYW5uZWwiLCJiYXRjaFNpemUiLCJwYXJzZVB1Ymxpc2hlciIsIlBhcnNlTWVzc2FnZVF1ZXVlIiwiY3JlYXRlUHVibGlzaGVyIiwiUGFyc2UiLCJhcHBsaWNhdGlvbklkIiwiZW5xdWV1ZSIsImJvZHkiLCJ3aGVyZSIsImF1dGgiLCJwdXNoU3RhdHVzIiwibGltaXQiLCJhcHBseURldmljZVRva2VuRXhpc3RzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwicmVzdCIsImZpbmQiLCJjb3VudCIsInJlc3VsdHMiLCJjb21wbGV0ZSIsIm1heFBhZ2VzIiwiTWF0aCIsImNlaWwiLCJzZXRSdW5uaW5nIiwicXVlcnkiLCJwdXNoV29ya0l0ZW0iLCJvYmplY3RJZCIsInB1Ymxpc2hSZXN1bHQiLCJwdWJsaXNoIiwiSlNPTiIsInN0cmluZ2lmeSIsInJlcG9uc2UiLCJyZXN1bHQiLCJkYXRhIiwibG9nIiwiaW5mbyIsImNhdGNoIiwiZXJyIiwibWVzc2FnZSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9QdXNoL1B1c2hRdWV1ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXJzZU1lc3NhZ2VRdWV1ZSB9IGZyb20gJy4uL1BhcnNlTWVzc2FnZVF1ZXVlJztcbmltcG9ydCByZXN0IGZyb20gJy4uL3Jlc3QnO1xuaW1wb3J0IHsgYXBwbHlEZXZpY2VUb2tlbkV4aXN0cyB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IFBhcnNlIGZyb20gJ3BhcnNlL25vZGUnO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuXG5jb25zdCBQVVNIX0NIQU5ORUwgPSAncGFyc2Utc2VydmVyLXB1c2gnO1xuY29uc3QgREVGQVVMVF9CQVRDSF9TSVpFID0gMTAwO1xuXG5leHBvcnQgY2xhc3MgUHVzaFF1ZXVlIHtcbiAgcGFyc2VQdWJsaXNoZXI6IE9iamVjdDtcbiAgY2hhbm5lbDogU3RyaW5nO1xuICBiYXRjaFNpemU6IE51bWJlcjtcblxuICAvLyBjb25maWcgb2JqZWN0IG9mIHRoZSBwdWJsaXNoZXIsIHJpZ2h0IG5vdyBpdCBvbmx5IGNvbnRhaW5zIHRoZSByZWRpc1VSTCxcbiAgLy8gYnV0IHdlIG1heSBleHRlbmQgaXQgbGF0ZXIuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogYW55ID0ge30pIHtcbiAgICB0aGlzLmNoYW5uZWwgPSBjb25maWcuY2hhbm5lbCB8fCBQdXNoUXVldWUuZGVmYXVsdFB1c2hDaGFubmVsKCk7XG4gICAgdGhpcy5iYXRjaFNpemUgPSBjb25maWcuYmF0Y2hTaXplIHx8IERFRkFVTFRfQkFUQ0hfU0laRTtcbiAgICB0aGlzLnBhcnNlUHVibGlzaGVyID0gUGFyc2VNZXNzYWdlUXVldWUuY3JlYXRlUHVibGlzaGVyKGNvbmZpZyk7XG4gIH1cblxuICBzdGF0aWMgZGVmYXVsdFB1c2hDaGFubmVsKCkge1xuICAgIHJldHVybiBgJHtQYXJzZS5hcHBsaWNhdGlvbklkfS0ke1BVU0hfQ0hBTk5FTH1gO1xuICB9XG5cbiAgZW5xdWV1ZShib2R5LCB3aGVyZSwgY29uZmlnLCBhdXRoLCBwdXNoU3RhdHVzKSB7XG4gICAgY29uc3QgbGltaXQgPSB0aGlzLmJhdGNoU2l6ZTtcblxuICAgIHdoZXJlID0gYXBwbHlEZXZpY2VUb2tlbkV4aXN0cyh3aGVyZSk7XG5cbiAgICAvLyBPcmRlciBieSBvYmplY3RJZCBzbyBubyBpbXBhY3Qgb24gdGhlIERCXG4gICAgLy8gY29uc3Qgb3JkZXIgPSAnb2JqZWN0SWQnO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICByZXR1cm4gcmVzdC5maW5kKGNvbmZpZywgYXV0aCwgJ19JbnN0YWxsYXRpb24nLCB3aGVyZSwge1xuICAgICAgICAgIGxpbWl0OiAwLFxuICAgICAgICAgIGNvdW50OiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAudGhlbigoeyByZXN1bHRzLCBjb3VudCB9KSA9PiB7XG4gICAgICAgIGlmICghcmVzdWx0cyB8fCBjb3VudCA9PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHB1c2hTdGF0dXMuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtYXhQYWdlcyA9IE1hdGguY2VpbChjb3VudCAvIGxpbWl0KTtcbiAgICAgICAgcHVzaFN0YXR1cy5zZXRSdW5uaW5nKG1heFBhZ2VzKTtcbiAgICAgICAgLy8gd2hpbGUgKHBhZ2UgPCBtYXhQYWdlcykge1xuICAgICAgICAvLyBjaGFuZ2VzIHJlcXVlc3QvbGltaXQvb3JkZXJCeSBieSBpZCByYW5nZSBpbnRlcnZhbHMgZm9yIGJldHRlciBwZXJmb3JtYW5jZVxuICAgICAgICAvLyBodHRwczovL2RvY3MubW9uZ29kYi5jb20vbWFudWFsL3JlZmVyZW5jZS9tZXRob2QvY3Vyc29yLnNraXAvXG4gICAgICAgIC8vIFJhbmdlIHF1ZXJpZXMgY2FuIHVzZSBpbmRleGVzIHRvIGF2b2lkIHNjYW5uaW5nIHVud2FudGVkIGRvY3VtZW50cyxcbiAgICAgICAgLy8gdHlwaWNhbGx5IHlpZWxkaW5nIGJldHRlciBwZXJmb3JtYW5jZSBhcyB0aGUgb2Zmc2V0IGdyb3dzIGNvbXBhcmVkXG4gICAgICAgIC8vIHRvIHVzaW5nIGN1cnNvci5za2lwKCkgZm9yIHBhZ2luYXRpb24uXG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0geyB3aGVyZSB9O1xuXG4gICAgICAgIGNvbnN0IHB1c2hXb3JrSXRlbSA9IHtcbiAgICAgICAgICBib2R5LFxuICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgIG1heFBhZ2VzLFxuICAgICAgICAgIHB1c2hTdGF0dXM6IHsgb2JqZWN0SWQ6IHB1c2hTdGF0dXMub2JqZWN0SWQgfSxcbiAgICAgICAgICBhcHBsaWNhdGlvbklkOiBjb25maWcuYXBwbGljYXRpb25JZCxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcHVibGlzaFJlc3VsdCA9IFByb21pc2UucmVzb2x2ZShcbiAgICAgICAgICB0aGlzLnBhcnNlUHVibGlzaGVyLnB1Ymxpc2goXG4gICAgICAgICAgICB0aGlzLmNoYW5uZWwsXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShwdXNoV29ya0l0ZW0pXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcHVibGlzaFJlc3VsdC50aGVuKHJlcG9uc2UgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IChyZXBvbnNlICYmIHJlcG9uc2UuZGF0YSkgfHwgcmVwb25zZTtcbiAgICAgICAgICBsb2cuaW5mbyhcbiAgICAgICAgICAgIGBBbGwgJHttYXhQYWdlc30gcGFja2FnZXMgd2VyZSBlbnF1ZXVlZCBmb3IgUHVzaFN0YXR1cyAke1xuICAgICAgICAgICAgICBwdXNoU3RhdHVzLm9iamVjdElkXG4gICAgICAgICAgICB9YCxcbiAgICAgICAgICAgIHJlc3VsdFxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgIGxvZy5pbmZvKFxuICAgICAgICAgIGBDYW4ndCBjb3VudCBpbnN0YWxsYXRpb25zIGZvciBQdXNoU3RhdHVzICR7cHVzaFN0YXR1cy5vYmplY3RJZH06ICR7XG4gICAgICAgICAgICBlcnIubWVzc2FnZVxuICAgICAgICAgIH1gXG4gICAgICAgICk7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH0pO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVBLE1BQU1BLFlBQVksR0FBRyxtQkFBckI7QUFDQSxNQUFNQyxrQkFBa0IsR0FBRyxHQUEzQjs7QUFFTyxNQUFNQyxTQUFOLENBQWdCO0VBS3JCO0VBQ0E7RUFDQUMsV0FB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